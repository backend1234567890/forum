swagger: "2.0"
info:
  title: Forum API
  description: |
    API description in for Toohak.
    All error strings are required to be clear descriptive message. The descriptive message won't change the marks you receive when being automarked as long as you make an attempt for each one to be custom, but they will improve the usability of the frontend.
  version: 1.0.0
 
schemes:
  - http

tags:
  - name: "Main"
    description: Login, signup, logout, clear
  - name: "Chat"
    description: Control anything relates to chat

components:
  prim:
    Token:
      type: string
      example: aswefnsjbfjnbwefin
      description: This is the hash value, no one knows the real token!!
    username:
      type: string
      example: faizarradhin
      description: Username, no space, all lowercase, should be unique
    displayName:
      type: string
      example: Faiz Arradhin
      description: Name that is displayed, can be anything
    password:
      type: string
      example: Classified12345
      description: at least 8 characters, contain 1 lowercase, 1 uppercase, and 1 number
    title:
      type: string
      example: Topic Title
      description: more than 5 characters, less than 50 characters
    topicId:
      type: integer
      example: 1234567
      description: integer, don't forget hashing
    userId:
      type: integer
      example: 1234567
      description: integer, don't forget hashing
    message:
      type: string
      example: This is an example of a message
      description: just normal string
    timeSent:
      type: integer
      example: 1683019484
      description: In seconds. You can find more information that here https://en.wikipedia.org/wiki/Unix_time
    Me:
      type: boolean
      example: true
      description: to determine, am I the sender or other people
    Description:
      type: string
      example: Description doesn't need to be ver long
    messageId:
      type: number
      example: 98362
  group:
    List:
      type: array
      items:
        type: object
        properties:
          topicId: 
            $ref: '#/components/prim/topicId'
          title:
            $ref: '#/components/prim/title'
          lastMessage:
            type: object
            properties:
              me:
                $ref: '#/components/prim/Me'
              sender:
                $ref: '#/components/prim/displayName'
              message: 
                $ref: '#/components/prim/message'
    Messages:
      type: array
      items:
        type: object
        properties:
          me:
            $ref: '#/components/prim/Me'
          sender:
            $ref: '#/components/prim/displayName'
          messageId:
            $ref: '#/components/prim/messageId'
          message:
            $ref: '#/components/prim/message'
          timeSent:
            $ref: '#/components/prim/timeSent'
  path:
    TopicId:
      in: path
      name: topicId
      required: true
      schema:
        $ref: '#/components/prim/topicId'
    MessageId:
      in: path
      name: messageId
      required: true
      schema:
        $ref: '#/components/prim/messageId'
  header:
    Token:
      in: header
      name: token
      required: true
      schema:
        type: string
        $ref: '#/components/prim/Token'
  query:
  body:
    register:
      in: body
      name: body
      required: true
      schema:
        type: object
        properties:
          username:
            $ref: '#/components/prim/username'
          displayName:
            $ref: '#/components/prim/displayName'
          password:
            $ref: '#/components/prim/password'
          repeatPassword:
            $ref: '#/components/prim/password'
    login:
      in: body
      name: body
      required: true
      schema:
        type: object
        properties:
          username:
            $ref: '#/components/prim/username'
          password:
            $ref: '#/components/prim/password'
    TopicCreate:
      in: body
      name: body
      required: true
      schema: 
        type: object
        properties:
          title:
            $ref: '#/components/prim/title'
          description:
            $ref: '#/components/prim/Description'
    sendMessage:
      in: body
      name: body
      required: true
      schema:
        type: object
        properties:
          message: 
            $ref: '#/components/prim/message' 
  return:
    Token:
      type: object
      properties:
        token:
          $ref: '#/components/prim/Token'
    Error:
      properties:
        error:
          type: string
          enum:
            - error
    Empty:
      type: object
    Topic:
      type: object
      properties:
        topicId:
          $ref: '#/components/prim/topicId'
    List:
      type: object
      properties:
        topics:
          $ref: '#/components/group/List'
    Info:
      type: object
      properties:
        topicId:
          $ref: '#/components/prim/topicId'
        title:
          $ref: '#/components/prim/title'
        description:
          $ref: '#/components/prim/Description'
        messages:
          $ref: '#/components/group/Messages'
    sendMessage:
      type: object
      properties:
        messageId: 
          $ref: '#/components/prim/messageId'
paths:
  /user/auth/register:
    post:
      summary: Register new user.
      description: Creating a new userId and token
      parameters:
        - $ref: '#/components/body/register'
      tags:
        - "Main"
      responses:
        200:
          description: OK
          schema:
            $ref: '#/components/return/Token'
        400:
          description: |
            Return error if any of the following conditions met:
            - Username has space
            - Username contains capital letter
            - Username has already been used by other user
            - Less than 8 characters
            - Password does not contain at least 1 lowercase
            - Password does not contain at least 1 uppercase
            - Password does not contain at least 1 number
          schema:
            $ref: '#/components/return/Error'
  /user/auth/login:
    post:
      summary: Login to the forum
      description: Deliver the user to the forum, create token for access
      parameters:
        - $ref: '#/components/body/login'
      tags: 
        - "Main"
      responses:
        200:
          description: OK
          schema:
            $ref: '#/components/return/Token'
        400:
          description: |
            Return error if any of the following conditions met:
            - Wrong username or password
          schema:
            $ref: '#/components/return/Error'
  /user/auth/logout:
    post:
      summary: Kick out from access
      description: Noooo
      parameters:
        - $ref: '#/components/header/Token'
      tags:
        - "Main"
      responses:
        200:
          description: OK
          schema:
            $ref: '#/components/return/Empty'
        401:
          description: |
            Return error if any of the following conditions met:
            - Invalid token
          schema:
            $ref: '#/components/return/Error'
  /user/topic/create:
    post:
      summary: Create new topic
      description: new conversation here
      parameters:
        - $ref: '#/components/header/Token'
        - $ref: '#/components/body/TopicCreate'
      tags:
        - "Chat"
      responses:
        200:
          description: OK
          schema:
            $ref: '#/components/return/Topic'
        401:
          description: |
            Return error if any of the following conditions met:
            - Invalid token
          schema:
            $ref: '#/components/return/Error'
        400:
          description: |
            Return error if any of the following conditions met:
            - Title is less than 5 characters
            - Title is more than 50 characters
          schema:
            $ref: '#/components/return/Error'
  /user/topic/{topicid}:
    put:
      summary: Edit forum title and description
      description: Already obvious from the summary
      parameters:
        - $ref: '#/components/header/Token'
        - $ref: '#/components/path/TopicId'
        - $ref: '#/components/body/TopicCreate'
      tags:
        - "Chat"
      responses:
        200:
          description: OK
          schema:
            $ref: '#/components/return/Empty'
        401:
          description: |
            Return error if any of the following conditions met:
            - Invalid token
          schema:
            $ref: '#/components/return/Error'
        400:
          description: |
            Return error if any of the following conditions met:
            - Title is less than 5 characters
            - Title is more than 50 characters
            - TopicId is not valid
          schema:
            $ref: '#/components/return/Error'
    delete:
      summary: delete topic and its message
      description: Maybe we add trash later
      parameters:
        - $ref: '#/components/header/Token'
        - $ref: '#/components/path/TopicId'
      tags:
        - "Main"
      responses:
        200: 
          description: OK
          schema:
            $ref: '#/components/return/Empty'
        401:
          description: |
            Return error if any of the following conditions met:
            - Invalid token
          schema:
            $ref: '#/components/return/Error'
        400:
          description: |
            Return error if any of the following conditions met:
            - Invalid topicId
          schema:
            $ref: '$/components/return/Error'
  /user/topic/list:
    get:
      summary: Collections of topics briefly
      description: Returns collection of topics briefly
      parameters:
        - $ref: '#/components/header/Token'
      tags:
        - "Chat"
      responses:
        200:
          description: OK
          schema: 
            $ref: '#/components/return/List'
        401:
          description: |
            Return error if any of the following conditions met:
            - Invalid token
          schema:
            $ref: '#/components/return/Error'
  /user/topic/{topicid}/info:
    get:
      summary: Complete data of a forum
      description: So much data should be returned here
      parameters:
        - $ref: '#/components/header/Token'
        - $ref: '#/components/path/TopicId'
      tags:
        - "Chat"
      responses:
        200:
          description: OK
          schema: 
            $ref: '#/components/return/Info'
        401:
          description: |
            Return error if any of the following conditions met:
            - Invalid token
          schema:
            $ref: '#/components/return/Error'
        400:
          description: |
            Return error if any of the following conditions met:
            - Invalid topicId
          schema:
            $ref: '#/components/return/Error'
  /user/topic/{topicid}/post:
    post:
      summary: Send a message to forum
      description: yeey
      parameters:
        - $ref: '#/components/header/Token'
        - $ref: '#/components/path/TopicId'
        - $ref: '#/components/body/sendMessage'
      tags:
        - "Chat"
      responses:
        200:
          description: OK
          schema:
            $ref: '#components/return/sendMessage'
        401:
          description: |
            Return error if any of the following conditions met:
            - Invalid token
          schema:
            $ref: '#/components/return/Error'
        400:
          description: |
            Return error if any of the following conditions met:
            - Invalid topicId
            - Message is empty
          schema:
            $ref: '#/components/return/Error'
  /user/topic/{topicid}/message/{messageid}:
    put:
      summary: Edit message body
      description: Edit message... Time sent is updated
      parameters:
        - $ref: '#/components/header/Token'
        - $ref: '#/components/path/TopicId'
        - $ref: '#/components/path/MessageId'
        - $ref: '#/components/body/sendMessage'
      tags:
        - "Chat"
      responses:
        200:
          description: OK
          schema:
            $ref: '#/components/return/Empty'
        400:
          description: |
            Return error if any of the following conditions met:
            - TopicId is not valid
            - MessageId is not in this topic
            - Message is empty
          schema:
            $ref: '#/components/return/Error'
        401:
          description: |
            Return error if any of the following conditions met:
            - Invalid token
          schema:
            $ref: '#/components/return/Error'
        403:
          description: |
            Return error if any of the following conditions met:
            - message is not sent by the correct sender
          schema:
            $ref: '#/components/return/Error'
    delete:
      summary: delete message
      description: Maybe we add trash later
      parameters:
        - $ref: '#/components/header/Token'
        - $ref: '#/components/path/TopicId'
        - $ref: '#/components/path/MessageId'
      tags:
        - "Main"
      responses:
        200: 
          description: OK
          schema:
            $ref: '#/components/return/Empty'
        401:
          description: |
            Return error if any of the following conditions met:
            - Invalid token
          schema:
            $ref: '#/components/return/Error'
        400:
          description: |
            Return error if any of the following conditions met:
            - Invalid topicId
            - Invalid MessageId
            - Message is not in the right topic
          schema:
            $ref: '$/components/return/Error'
        403:
          description: |
            Return error if any of the following conditions met:
            - message is not sent by the correct sender
          schema:
            $ref: '#/components/return/Error'
  /clear:
    delete:
      summary: Reset the state of the application back to the start.
      description: Wipe all details back to the beggining as if the data structure is fresh.
      tags:
        - "Main"
      responses:
        200:
          description: OK
          schema:
            $ref: '#/components/return/Empty'

securityDefinitions:
  Iteration 3 Token Authentication:
    type: apiKey
    name: token
    in: header
